services:

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: start-dev
    ports:
      - 8080:8080
    networks:
      - solution_net
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin

  broker:
    container_name: broker
    image: apache/kafka-native:latest
    ports:
      - 9092:9092
    networks:
      - solution_net
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://broker:9092,CONTROLLER://broker:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@broker:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=1

  auth_service:
    container_name: auth_service
    build:
      context: .
      dockerfile: auth/Dockerfile
    ports:
      - 5002:80
    networks:
      - solution_net
    depends_on:
      - keycloak
      - broker
    environment:
      - KEYCLOAK_HOST=http://keycloak:8080
      - KEYCLOAK_ADMIN_LOGIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_CLIENT=app_client
      - KEYCLOAK_CLIENT_SECRET=secret_key_or_whatever
      - KEYCLOAK_REALM=demo_realm
      - KEYCLOAK_CUSTOMER_ROLE=customer
      - KEYCLOAK_VENDOR_ROLE=vendor
      - SERVICE_HOST=0.0.0.0:80
      - KAFKA_HOST=broker:9092
      - KAFKA_CUSTOMER_TOPIC=customer-created
      - KAFKA_VENDOR_TOPIC=vendor-created

  customers_pg:
    container_name: customers_pg
    build:
      context: .
      dockerfile: customers/postgres.Dockerfile
    ports:
      - 7432:5432
    networks:
      - solution_net
    environment:
      - POSTGRES_USER=usr
      - POSTGRES_PASSWORD=pwd

  customers_service:
    container_name: customers_service
    build:
      context: .
      dockerfile: customers/Dockerfile
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - solution_net
    depends_on:
      - broker
      - customers_pg
    environment:
      - SERVICE_HOST=0.0.0.0:80
      - KAFKA_HOST=broker:9092
      - KAFKA_CUSTOMER_TOPIC=customer-created
      - DB_HOST=postgres://usr:pwd@customers_pg:5432/customers_db
      
  vendors_pg:
    container_name: vendors_pg
    build:
      context: .
      dockerfile: vendors/postgres.Dockerfile
    ports:
      - 8432:5432
    networks:
      - solution_net
    environment:
      - POSTGRES_USER=usr
      - POSTGRES_PASSWORD=pwd

  vendors_service:
    container_name: vendors_service
    build:
      context: .
      dockerfile: vendors/Dockerfile
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - solution_net
    depends_on:
      - broker
      - vendors_pg
    environment:
      - SERVICE_HOST=0.0.0.0:80
      - KAFKA_HOST=broker:9092
      - KAFKA_VENDOR_TOPIC=vendor-created
      - DB_HOST=postgres://usr:pwd@vendors_pg:5432/vendors_db

  goods_db:
    image: scylladb/scylla
    container_name: goods_db

  goods_service:
    container_name: goods_service
    build:
      context: .
      dockerfile: goods/Dockerfile
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - solution_net
    depends_on:
      - goods_db
    environment:
      - SERVICE_HOST=0.0.0.0:80
      - DB_HOST=goods_db

  proxy:
    build:
      context: .
      dockerfile: proxy/Dockerfile
    container_name: proxy
    ports:
      - 5001:80
    networks:
      - solution_net
    depends_on:
      - auth_service
      - customers_service
      - vendors_service
    restart: always

networks:
  solution_net:
    driver: bridge